{"version":3,"sources":["webpack:///webpack/bootstrap e8fc5582941ee2987a82","webpack:///./client/js/objects/Common.js","webpack:///./client/js/objects/Attribute.js","webpack:///./client/js/objects/AttributesPanel.js","webpack:///./client/js/Main.js","webpack:///./client/js/objects/AttributesCollection.js","webpack:///./client/js/objects/attributs.json","webpack:///./client/js/objects/AttributeButton.js","webpack:///./client/js/objects/StrategyPanel.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;AC7DA;AAAA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;;AAGA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,QAAQ;AACnB,aAAa,sBAAsB;AACnC;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,C;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC,uBAAuB,MAAM,gBAAgB;AAC7E,wCAAwC,mBAAmB,sBAAsB,oBAAoB;AACrG;AACA;;AAEA,oE;;;;;;;;;;;ACrFA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;;AAEA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,YAAY;AACZ,SAAS;AACT;;AAEA;AACA;AACA,eAAe,WAAW;AAC1B,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,WAAW;AAC1B,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,WAAW;AAC1B,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0E;;;;;;;;;;AC9FA;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK,4EAA4E;AACjF,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK,+CAA+C;AACpD,KAAK;AACL;;AAEA;AACA;AACA,KAAK,eAAe;AACpB,KAAK,eAAe;AACpB,KAAK,eAAe;AACpB,KAAK,eAAe;AACpB,KAAK;AACL;;AAEA;;;;;;;;;;;ACxBA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gCAAgC,IAAI;AACpC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,wDAAwD,UAAU;AAClE;AACA,qCAAqC,MAAM;AAC3C,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA,6C;;;;;;;;AClKA,kBAAkB,aAAa,WAAW,UAAU,uDAAuD,UAAU,6DAA6D,SAAS,4DAA4D,SAAS,UAAU,mEAAmE,SAAS,+DAA+D,SAAS,kE;;;;;;;;;ACA9Z;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B,eAAe,aAAa;AAC5B,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0E;;;;;;;;;AC3GA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB;;AAEA;AACA,aAAa,OAAO;AACpB,cAAc,YAAY;AAC1B,cAAc,YAAY;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,aAAa;AAC5B,eAAe,aAAa;AAC5B,eAAe,iBAAiB;AAChC,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,cAAc;AAC7B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,WAAW;AACX;;AAEA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,iBAAiB;AAC9C;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"wwae.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e8fc5582941ee2987a82","/** @module Common */\n\n/**\n * L'objet décrivant l'arbre de stratégie pour Vis.js\n * @type {object}\n */\nexport let STRATEGY_OPTIONS = {\n    locale: 'en', //si on met fr ça casse\n    height: '100%',\n    width: '100%',\n    autoResize: true,\n    edges:{\n        arrows: {\n            to: true //affiche la flêche côté arrivé\n        }\n    },\n    layout: {\n        hierarchical: {\n            direction: 'UD' //diréction de la hiérachisation de l'arbre du haut vers le bas (Up Down)\n        }\n    },\n    interaction: {\n        hover: true //active la gestion des événements de survol des noeuds\n    },\n    manipulation: {\n        enabled: false //true -> affiche le petit menu edit\n    }\n};\n\n\n/**\n * Evenements disponible pour les ojets Vis.Network\n * @type {string[]}\n */\nconst NETWORK_EVENTS =   [\n                                    \"click\", \"doubleClick\", \"dragStart\", \"dragging\", \"dragEnd\", \"zoom\", \"showPopup\", \"hidePopup\",\n                                    \"select\", \"selectNode\", \"selectEdge\", \"deselectNode\", \"deselectEdge\",\n                                    \"hoverNode\", \"hoverEdge\", \"blurNode\", \"blurEdge\"\n                                ];\n\nObject.freeze(NETWORK_EVENTS);\n\n/**\n * Indique si le nom de l'événement donné est un événement supporté par Vis.js\n * @param {string} event le nom de l'événement\n * @returns {boolean} true si event est supporté, false sinon\n */\nexport function isNetworkEvent(event){\n    if(typeof event !== 'string')\n        return false;\n    else\n        return NETWORK_EVENTS.includes(event);\n}\n\n/**\n * Créer un HTMLElement div et le concatène à l'element parent.\n * @param {HTMLElement} parent le parent\n * @param {!string} childId l'id de l'élément à créer\n * @returns {HTMLElement|undefined} l'élément créé ou undefined si parent n'est pas un HTMLElement ou si childID n'est pas une chaîne\n */\nexport function createChildDiv(parent, childId){\n    if(!(parent instanceof HTMLElement) || typeof childId !== \"string\"){\n        return undefined;\n    }else{\n        let child = document.createElement('div');\n        child.setAttribute('id', childId);\n        parent.appendChild(child);\n        return child;\n    }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/js/objects/Common.js\n// module id = 0\n// module chunks = 0","/**\n * Représente un attribut d'un personnage avec une valeur.\n * Chaque instance d'Attribute ne contient qu'une seule valeur.\n */\nclass Attribute{\n    /**\n     * Constructeur\n     * @param {!AttributeJSON} jsonDesc Un objet JSON décrivant l'attribut\n     * @param {!string} attribute Le nom de l'attribut (ex : 'cheveux')\n     * @param {!string} value La valeur de l'attribut (ex : 'chauve')\n     * @throws {Error} Lance une erreur si jsonDesc n'est pas un objet ou si attribute ou value ne sont pas une chaîne\n     */\n    constructor(jsonDesc, attribute, value){\n        if(typeof jsonDesc !== \"object\"){\n            throw new Error(\"@Attribute.constructor() : L'argument jsonDesc doit être un objet JSON\");\n        }\n        if(typeof attribute !== \"string\"){\n            throw new Error(\"@Attribute.constructor() : L'argument attribute doit être une chaîne de caractère\");\n        }\n        if(typeof value !== \"string\"){\n            throw new Error(\"@Attribute.constructor() : L'argument value doit être une chaîne de caractère\");\n        }\n        /**\n         * Le nom de l'attribut\n         * @member {string}\n         */\n        this.attributeKey = attribute;\n        /**\n         * La valeur de l'attribut\n         * @member {string}\n         */\n        this.value = value;\n        /**\n         * Le test de la proposition au format court\n         * @member {string}\n         */\n        this.short = jsonDesc[\"court\"];\n        /**\n         * Le test de la proposition au format long\n         * @member {string}\n         */\n        this.long = jsonDesc[\"long\"];\n    }\n\n    /**\n     * Retourne la valeur de l'attribut (ex : 'chauve')\n     * @returns {string}\n     */\n    getValue(){\n        return this.value;\n    }\n\n    /**\n     * Retourne la proposition de l'attribut au format court\n     * @returns {string}\n     */\n    getShortText(){\n        return this.short;\n    }\n\n    /**\n     * Retourne la proposition de l'attribut au format long\n     * @returns {string}\n     */\n    getLongText(){\n        return this.long;\n    }\n\n    /**\n     * Retourne le nom de l'attribut\n     * @returns {string}\n     */\n    getAttributeKey(){\n        return this.attributeKey;\n    }\n\n    /**\n     * Affiche l'attribut dans la console\n     */\n    prettyPrint(){\n        console.log(`Attribut ${this.getAttributeKey()} -> ${this.getValue()} :`);\n        console.log(`\\ttexte long  : \"${this.getLongText()}\"\\n\\ttexte court : \"${this.getShortText()}\"`);\n    }\n}\n\nexport default Attribute;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/js/objects/Attribute.js\n// module id = 1\n// module chunks = 0","import * as AttributesCollection from \"./AttributesCollection\";\nimport * as Common from './Common';\nimport Attribute from './Attribute';\nimport AttributeButton from './AttributeButton';\n\n/**\n * Panel contenant les boutons des attributs\n */\nclass AttributesPanel {\n    /**\n     * Constructeur.\n     * Instancie directement tout les boutons sans les cacher.\n     * @param {!HTMLElement} element La div servant de conteneurs pour les boutons (censé être la div avec l'id 'attributs')\n     * @trhows {Error} Lance un erreur si element n'est pas une instance de HTMLElement\n     */\n    constructor(element){\n        /**\n         * Singleton de la collection des attributs.\n         * @member {AttributesCollection}\n         */\n        this.attributesCollection = AttributesCollection.singleton;\n        if(!(element instanceof HTMLElement)) {\n            throw new Error(\"@AttributesPanel() -> Erreur : element doit être une instance de HTMLElement\");\n        }\n        /**\n         * Element HTML du panel\n         * @member {HTMLElement}\n         */\n        this.element = element;\n\n        //création des boutons\n        /**\n         * Liste des boutons du panel\n         * @member {Array<AttributeButton>}\n         */\n        this.buttons = [];\n        let map = this.attributesCollection.getAttributesValuesKeysMap();\n        map.forEach(attribute => {\n           this.buttons[attribute] = [];\n           map[attribute].forEach(value => {\n               this.buttons[attribute][value] = undefined;\n               try{\n                   this.addButton(this.attributesCollection.getAttributeInstance(attribute, value));\n               }catch(e){\n                   console.error(\"@AttributesPanel.constructor() : erreur lors de l'ajout du boutons (\"+attribute+\",\"+value+\") : \");\n                   console.error(e);\n               }\n           }) ;\n        });\n    }\n\n    /**\n     * Ajoute un bouton avec l'attribut donné s'il n'existe pas déja\n     * @param {!Attribute} attribute l'instance de l'attribut\n     * @throws {Error} Lance un erreur si attribute n'est pas une instance de Attribute\n     */\n    addButton(attribute){\n        if(!(attribute instanceof Attribute)){\n            throw new Error(\"@AttributesPanel.addButton() : L'attribut attribute doit être une instance de Attribute\");\n        }\n        if(!(this.buttons[attribute.getAttributeKey()][attribute.getValue()] instanceof AttributeButton)){\n            this.buttons[attribute.getAttributeKey()][attribute.getValue()] = new AttributeButton(attribute,this.element);\n        }\n    }\n\n    /**\n     * Chache le bouton correspondant à l'attribut s'il existe\n     * @param {!Attribute} attribute l'instance de l'attribut\n     * @throws {Error} Lance un erreur si attribute n'est pas une instance de Attribute\n     */\n    hideButton(attribute){\n        if(!(attribute instanceof Attribute)){\n            throw new Error(\"@AttributesPanel.addButton() : L'attribut attribute doit être une instance de Attribute\");\n        }\n        if(this.buttons[attribute.getAttributeKey()][attribute.getValue()] instanceof Attribute){\n            this.buttons[attribute.getAttributeKey()][attribute.getValue()].hide();\n        }\n    }\n\n    /**\n     * Rend visible le bouton correspondant à l'attribut s'il existe\n     * @param {!Attribute} attribute l'instance de l'attribut\n     * @throws {Error} Lance un erreur si attribute n'est pas une instance de Attribute\n     */\n    showButton(attribute){\n        if(!(attribute instanceof Attribute)){\n            throw new Error(\"@AttributesPanel.addButton() : L'attribut attribute doit être une instance de Attribute\");\n        }\n        if(this.buttons[attribute.getAttributeKey()][attribute.getValue()] instanceof Attribute) {\n            this.buttons[attribute.getAttributeKey()][attribute.getValue()].show();\n        }\n    }\n}\n\nexport default AttributesPanel;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/js/objects/AttributesPanel.js\n// module id = 2\n// module chunks = 0","/* global vis */\n\nimport AttributesPanel from \"./objects/AttributesPanel\";\nimport StrategyPanel from \"./objects/StrategyPanel\";\nimport * as Common from \"./objects/Common\";\n\n// create an array with nodes\nlet nodes = new vis.DataSet([\n    {id: 1, label: 'Node 1', level: 0, title: 'Je s\\'appelle root', enabled:true},\n    {id: 2, label: 'Node 2', level: 1, enabled:true},\n    {id: 3, label: 'Node 3', level: 1, enabled:true},\n    {id: 4, label: 'Node 4', level: 2, enabled:true},\n    {id: 5, label: 'Node 5', level: 2, enabled:true}\n]);\n\n// create an array with edges\nlet edges = new vis.DataSet([\n    {from: 1, to: 2},\n    {from: 1, to: 3},\n    {from: 2, to: 4},\n    {from: 2, to: 5},\n    {from: 3}\n]);\n\nnew StrategyPanel(document.getElementById('strategie-network'), nodes, edges, new AttributesPanel(document.getElementById('attributs')));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/js/Main.js\n// module id = 3\n// module chunks = 0","import Attribute from './Attribute';\nimport attributsJSON from './attributs';\n\n/**\n * @typedef {Object} AttributeJSON\n * @property {string} long Une question décrivant la valeur l'attribut concerné (utilisée avec les boutons)\n * @property {string} court La même question au format plus court (utilisée pour l'arbre de stratégie)\n */\n\n/**\n * Gère une collection d'Attribute.\n * Cette classe est implémentée en tant que singleton accessible\n * avec AttributesCollection.singleton, en supposant avoir importé\n * la classe sous ce même nom\n */\nclass AttributesCollection{\n\n    /**\n     * Stocke le JSON dans 'attributs', construits un tableau 2D\n     * destiné à stocker chaque instance d'Attribute de sorte à\n     * ne pas dupliquer les instances inutilement.\n     */\n    constructor(){\n        /**\n         * Le JSON contenant les attributs et leurs valeurs\n         * @member {Object}\n         */\n        this.attributs = attributsJSON[\"attributs\"];\n        /**\n         * Un tableau 2D servant à contenir chaque instances d'Attribute.\n         * Chaque Attribute n'est effectivement instancié qu'après l'appel de la\n         * méthode getAttributeInstance().\n         * @member {Attribute[][]}\n         */\n        this.attributesMap = this.getAttributesValuesKeysMap();\n        this.attributesMap.forEach(attribute => {\n            this.attributesMap[attribute].forEach(value => {\n                this.attributesMap[attribute][value] = undefined;\n            });\n        });\n        this.prettyPrint();\n    }\n\n    /**\n     * Retourne la liste des attributs contenu dans la collection.\n     * @returns {string[]}\n     */\n    getAttributesKeys(){\n        return _.allKeys(this.attributs);\n    }\n\n    /**\n     * Retourne la liste des valeurs pour un attribut, ou undefined s'il n'existe pas.\n     * @param attribute l'attribut\n     * @returns {string[]}\n     */\n    getValuesKeys(attribute){\n        if(this.checkAttributeExists(attribute)){\n            return _.allKeys(this.attributs[attribute]);\n        }else{\n            return undefined;\n        }\n    }\n\n    /**\n     * Retourne l'objet JSON représentant un Attribute correspondant à l'attribut\n     * de valeurs donnés, ou undefined si l'un ou l'autre n'existe pas.\n     * @param attribute l'attribut\n     * @param value la valeur\n     * @returns {AttributeJSON|undefined}\n     */\n    getAttributeJSON(attribute, value){\n        if(this.checkValueExists(attribute, value)){\n            return this.attributs[attribute][value];\n        }else{\n            return undefined;\n        }\n    }\n\n    /**\n     * Retourne l'instance d'Attribute pour un attribut et une valeur données.\n     * @param attribute l'attribut\n     * @param value la valeur\n     * @returns {Attribute|undefined}\n     */\n    getAttributeInstance(attribute, value){\n        let jsonAttribute = this.getAttributeJSON(attribute, value);\n        if(jsonAttribute !== undefined){\n            if(this.attributesMap[attribute][value] === undefined) {\n                let attr = new Attribute(jsonAttribute, attribute, value);\n                this.attributesMap[attribute][value] = attr;\n                return attr;\n            }else{\n                return this.attributesMap[attribute][value];\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Vérifie que l'attribut existe dans la collection.\n     * @param attribute l'attribut\n     * @returns {boolean} true si l'attribut existe, false sinon.\n     */\n    checkAttributeExists(attribute){\n        return typeof attribute === \"string\" && this.getAttributesKeys().includes(attribute);\n    }\n\n    /**\n     * Vérifie que la valeur existe pour l'attribut donné\n     * @param attribute l'attribut\n     * @param value la valeur\n     * @returns {boolean} true si la valeur existe pour l'attribut donné, false sinon.\n     */\n    checkValueExists(attribute, value){\n        if(this.checkAttributeExists(attribute)){\n            return this.getValuesKeys(attribute).includes(value);\n        }else{\n            return false;\n        }\n    }\n\n    /**\n     * Retourne un tableau 2D contenant les listes des valeurs pour chaque attributs.\n     * @example\n     * //Supposons que le JSON contient un attribut 'yeux' ayant deux valeurs, 'bleu' et 'vert'\n     * let map = singleton.getAttributesValuesKeysMap();\n     * console.log(map['yeux']); //{'bleu','vert'}\n     * @returns {string[][]}\n     */\n    getAttributesValuesKeysMap(){\n        let map = this.getAttributesKeys();\n        if(map !== undefined){\n            map.forEach(key => {\n                map[key] = this.getValuesKeys(key);\n            });\n        }\n        return map;\n    }\n\n    /**\n     * Affiche le contenu de la collection dans la console\n     */\n    prettyPrint(){\n        let map = this.getAttributesValuesKeysMap();\n        if(map.length < 1){\n            console.log(\"Map des attributs vide\");\n        }else{\n            map.forEach(attribute => {\n                console.log(`Valeurs pour l'attribut '${attribute}' :`);\n                map[attribute].forEach(value => {\n                    console.log(`\\t${value}`) ;\n                });\n            });\n        }\n    }\n}\n\n/**\n * Singleton de la collection instancier au démarrage de l'application.\n * @type {AttributesCollection}\n */\nexport const singleton = new AttributesCollection();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/js/objects/AttributesCollection.js\n// module id = 4\n// module chunks = 0","module.exports = {\"attributs\":{\"cheveux\":{\"chauve\":{\"long\":\"Le personnage est chauve ?\",\"court\":\"Chauve ?\"},\"blond\":{\"long\":\"Le personnage est blond ?\",\"court\":\"Cheveux blond ?\"},\"brun\":{\"long\":\"Le personnage est brun ?\",\"court\":\"Cheveux brun ?\"}},\"yeux\":{\"marron\":{\"long\":\"Le personnage a les yeux marron ?\",\"court\":\"Yeux marron ?\"},\"bleu\":{\"long\":\"Le personnage a les yeux bleu ?\",\"court\":\"Yeux bleu ?\"},\"vert\":{\"long\":\"Le personnage a les yeux vert ?\",\"court\":\"Yeux vert ?\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/js/objects/attributs.json\n// module id = 5\n// module chunks = 0","import * as Common from './Common';\nimport Attribute from './Attribute';\n\nlet nextButtonId = 0;\n\n/**\n * Représente un bouton lié à un attribut.\n * Utilisé dans le panel 'Attributs'\n * @see Attribute\n */\nclass AttributeButton {\n    /**\n     * Constructeur.\n     * Dans le cas ou l'argument parent n'est pas un objet ou n'est pas renseigné,\n     * on tente de trouver la div avec l'id 'attributs' à la place.\n     * @param {!Attribute} attribute Une instance d'Attribute\n     * @param {?HTMLElement} parent L'élément parent (censé être la div du panel 'Attributs')\n     * @throws {Error} Lance une erreur si attribute n'est une instance d'Attribute\n     * @throws {Error} Lance une si l'élément d'id 'attributs' n'à pas pu être trouvé dans le cas il l'argument parent serais mal renseigné\n     */\n    constructor(attribute, parent){\n        if(!(attribute instanceof Attribute)){\n            throw new Error(\"L'argument attribute doit être une instance de Attribute\");\n        }\n        if(!(parent instanceof HTMLElement)){\n            this.parent = document.getElementById('attributs');\n            if(!(parent instanceof HTMLElement)){\n                throw new Error(\"L'argument parent doit être un Element HTML\");\n            }\n        }else{\n            this.parent = parent;\n        }\n\n        /**\n         * L'élément HTML du bouton\n         * @member{Element}\n         */\n        this.element = Common.createChildDiv(this.parent, \"attributeButton\"+nextButtonId);\n        this.element.setAttribute(\"class\", \"attributeButton\");\n        nextButtonId++;\n        /**\n         * Indique si le bouton est caché ou visible\n         * @member{boolean}\n         */\n        this.hidden = false;\n        /**\n         * L'instance d'Attribute liée à ce bouton\n         * @member{Attribute}\n         */\n        this.attribute = attribute;\n        this.setText(this.attribute.getLongText());\n        this.element.addEventListener(\"click\", event => this.onClick(event));\n        //si on ne donne pas un consommateur de event, on perd la référence à this dans le listener\n    }\n\n    /**\n     * Cache le bouton s'il est visible\n     */\n    hide(){\n        if(!this.hidden){\n            this.element.setAttribute('style', 'display: none;');\n        }\n    }\n\n    /**\n     * Rend visible le bouton s'il est caché\n     */\n    show(){\n        if(this.hidden){\n            this.element.removeAttribute('style');\n        }\n    }\n\n    /**\n     * Handler de l'événement 'onClick' sur l'élément HTML du bouton\n     * @param {Event} event l'événement onClick\n     */\n    onClick(event){\n        this.attribute.prettyPrint();\n    }\n\n    /**\n     * Indique si le bouton est caché ou visible\n     * @returns {boolean} true si le bouton est caché, false s'il est visible\n     */\n    isHidden(){\n        return this.hidden;\n    }\n\n    /**\n     * Définis le texte du bouton\n     * @param {?string} text le nouveau texte\n     */\n    setText(text){\n        let textNode;\n        if(text === undefined) {\n            textNode = document.createTextNode(\"\");\n        }else{\n            textNode = document.createTextNode(text);\n        }\n        while (this.element.firstChild) {\n            this.element.removeChild(this.element.firstChild);\n        }\n        this.element.appendChild(textNode);\n    }\n}\n\nexport default AttributeButton;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/js/objects/AttributeButton.js\n// module id = 6\n// module chunks = 0","import * as Common from './Common';\nimport AttributesPanel from \"./AttributesPanel\";\n\n//on a besoin de garder un pointeur vers une instance pour y accèder dans\n//les handlers des événements de vis.js car ces dèrnier sont\n//appelé avec un contexte différents définies par vis.js\nlet instance;\n\n/**\n * Callback pour un événement\n * @callback eventCallback\n * @param {Event} event Un événement\n */\n\n/**\n * @typedef {object} StrategyData\n * @property {vis.DataSet} nodes les noeuds\n * @property {vis.DataSet} edges les liens\n */\n\n/**\n * Représente la panel contenant l'arbre de stratégie.\n */\nclass StrategyPanel {\n    /**\n     *\n     * @param {!HTMLElement} element L'élement HTML conteneur de l'arbre de stratégie\n     * @param {?vis.DataSet} nodes L'ensemble des noeuds de départ\n     * @param {?vis.DataSet} edges L'ensemble des liens de départ\n     * @param {!AttributesPanel} attributesPanel Une instance du panel des attributs\n     * @throws {Error} Lance une erreur si element n'est pas une instance de HTMLElement\n     * @throws {Error} Lance une erreur si attributesPanel n'est pas une instance de AttributesPanel\n     */\n    constructor(element, nodes, edges, attributesPanel){\n        if(!(element instanceof HTMLElement)) {\n            throw new Error(\"@StrategyPanel() -> Erreur : element doit être une instance de HTMLElement\");\n        }\n        if(!(attributesPanel instanceof AttributesPanel)){\n            throw new Error(\"@StrategyPanel() -> Erreur : attributsPanel doit être une instance de AttributesPanel\");\n        }\n        /**\n         * L'élément conteneur du panel\n         * @member {HTMLElement}\n         */\n        this.element = element;\n        if(!(nodes instanceof vis.DataSet)){\n            console.log(\"@StrategyPanel() -> Debug : noeuds par défaut\");\n            this.nodes = new vis.DataSet([\n\n            ]);\n        }else{\n            this.nodes = nodes;\n        }\n\n        if(!(edges instanceof vis.DataSet)){\n            console.log(\"@StrategyPanel() -> Debug : liens par défaut\");\n            this.edges = new vis.DataSet([\n\n            ]);\n        }else{\n            this.edges = edges;\n        }\n\n        /**\n         * Données contenant les noeuds et les liens de l'arbre de stratégie\n         * @member {StrategyData}\n         */\n        this.data = {\n            nodes: this.nodes,\n            edges: this.edges\n        };\n\n        /**\n         * Instance de vis.Network permettant de visualiser l'arbre\n         * @member {vis.Network}\n         */\n        this.network = new vis.Network(element, this.data, Common.STRATEGY_OPTIONS);\n        this.addNode(6, 'Node 6', 2);\n        this.setNetworkHandler(\"click\", this.onClick);\n        this.setNetworkHandler(\"doubleClick\", this.onDoubleClick);\n        instance = this;\n    }\n\n    /**\n     * Retourne le Network de l'arbre de stratégie\n     * @returns {StrategyPanel.network}\n     */\n    network(){\n        return this.network;\n    }\n\n    /**\n     * Définis un handler pour l'événement donnée, s'il est utilisable avec le Network\n     * @param {string} event La chaîne correspondant à l'événement\n     * @param {eventCallback} handler Callback de l'événement\n     * @see {@link module-Common.isNetworkEvent}\n     */\n    setNetworkHandler(event, handler){\n        if(typeof event === 'string' && typeof handler === 'function'){\n            if(Common.isNetworkEvent(event)){\n                this.network.on(event, handler);\n            }\n        }\n    }\n\n    /**\n     * Supprime le noeud donné en paramètre\n     * @param {object} node le noeud à supprimer\n     */\n    deleteNode(node){\n        this.data.nodes.remove(node);\n    }\n\n    /**\n     * Désactive ou active le noeud donné en paramètre et supprime les fils si désactivés\n     * @param {object} node le noeud à désactiver ou activer\n     */\n    updateNode(id){\n      var node = this.data.nodes.get(id);\n\n      if(node.enabled) {\n        // Change le couleur du noeud en gris\n        this.data.nodes.update([{\n          id:id,\n          enabled: false,\n          color:{\n            background:'#848484',\n            border:'#2E2E2E',\n            highlight:{\n              background:'#A4A4A4',\n              border:'#2E2E2E'\n            },\n            hover:{\n              background:'#A4A4A4',\n              border:'#2E2E2E'\n            }\n          }\n        }]);\n\n        // Si tous les fils sont désactivés, on les supprime\n        var allDisabled = true;\n        var sons = [];\n\n        this.data.edges.forEach((edge) => {\n          if (edge.from == node.id) {\n            let son = this.data.nodes.get(edge.to);\n\n            sons.push(son);\n\n            if(son.enabled) {\n              allDisabled = false;\n            }\n          }\n        });\n\n        if (allDisabled && sons.length != 0) {\n          sons.forEach((son) => {\n            this.deleteNode(son);\n          });\n        }\n\n      } else {\n        // Remet la couleur du noeud par défaut\n        this.data.nodes.update([{\n          id:id,\n          enabled: true,\n          color:{\n            background:'#D2E5FF',\n            border:'#2B7CE9',\n            highlight:{\n              background:'#D2E5FF',\n              border:'#2B7CE9'\n            },\n            hover:{\n              background:'#D2E5FF',\n              border:'#2B7CE9'\n            }\n          }\n        }]);\n      }\n    }\n\n    /**\n     * Ajout un nouveau noeud au Network\n     * @param id l'id du noeud\n     * @param label le label du noeud\n     * @param level le niveau hiérarchique du noeud (le plus élevé est en bas de l'écran)\n     */\n    addNode(id, label, level){\n        this.data.nodes.add({id, label, level});\n    }\n\n    /**\n     * Handler appelé lors des événement click sur le network\n     * @param {object} params Objet contenant les infos de l'événement\n     */\n    onClick(params){\n        params.event = \"[original event]\";\n        document.getElementById('eventSpan').innerHTML = '<h2>Click event:</h2>' + JSON.stringify(params, null, 4);\n        console.log('click event, getNodeAt returns: ' + this.getNodeAt(params.pointer.DOM));\n    }\n\n    /**\n     * Handler appelé lors des événement doubleClick sur le network\n     * @param {object} params Objet contenant les infos de l'événement\n     */\n    onDoubleClick(params){\n        let clickedNode = this.getNodeAt(params.pointer.DOM);\n        params.event = \"[original event]\";\n        document.getElementById('eventSpan').innerHTML = '<h2>DoubleClick event:</h2>' + JSON.stringify(params, null, 4);\n        console.log('click event, getNodeAt returns: ' + clickedNode);\n        if(clickedNode !== undefined){\n            instance.updateNode(clickedNode);\n        }\n    }\n}\n\nexport default StrategyPanel;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/js/objects/StrategyPanel.js\n// module id = 7\n// module chunks = 0"],"sourceRoot":""}